{"name":"STTwitter","tagline":"A comprehensive Objective-C library for Twitter API 1.1","body":"**[2013-10-24]** STTwitter was presented at [SoftShake 2013](http://soft-shake.ch) ([slides](http://seriot.ch/resources/abusing_twitter_api/ios_twitter_integration_sos13.pdf)).\r\n\r\n1. [Testimonials](#testimonials)\r\n2. [Installation](#installation)\r\n3. [Code Snippets](#code-snippets)\r\n4. [Various Kinds of OAuth Connections](#various-kinds-of-oauth-connections)\r\n5. [OAuth Consumer Tokens](#oauth-consumer-tokens)\r\n6. [Demo / Test Project](#demo--test-project)\r\n7. [Integration Tips](#integration-tips)\r\n8. [Troubleshooting](#troubleshooting)\r\n9. [Developers](#developers)\r\n10. [BSD 3-Clause License](#bsd-3-clause-license)  \r\n\r\n### Testimonials\r\n\r\n> \"We are now using STTwitter\"\r\n[Adium developers](https://adium.im/blog/2013/07/adium-1-5-7-released/)\r\n\r\n> \"An awesome Objective-C wrapper for Twitterâ€™s HTTP API? Yes please!\"\r\n[@nilsou](https://twitter.com/nilsou/status/392364862472736768)\r\n\r\n> \"Your Library is really great, I stopped the development of my client because I was hating twitter APIs for some reasons, this Library make me want to continue, seriously thank you!\"\r\n[MP0w](https://github.com/nst/STTwitter/pull/49#issuecomment-28746249)\r\n\r\n> \"Powered by his own backend wrapper for HTTP calls, STTwitter writes most of the code for you for oAuth based authentication and API resource access like statuses, mentions, users, searches, friends & followers, favorites, lists, places, trends. The documentation is also excellent.\"\r\n[STTwitter - Delightful Twitter Library for iOS / buddingdevelopers.com](http://buddingdevelopers.com/sttwitter-delightful-twitter-library-for-ios/)\r\n\r\n### Installation\r\n\r\nDrag and drop STTwitter directory into your project.\r\n\r\nLink your project with the following frameworks:\r\n\r\n- Accounts.framework\r\n- Twitter.framework\r\n- Security.framework (OS X only)\r\n- Social.framework (iOS only, weak)\r\n\r\nIf you want to use CocoaPods, add the following two lines to your Podfile:\r\n\r\n    pod 'STTwitter'\r\n    platform :ios, '5.0'\r\n\r\nThen, run the following command to install the STTwitter pod:\r\n\r\n    pod install\r\n\r\nSTTwitter does not depend on AppKit or UIKit and hence can be used in a command-line Twitter client.\r\n\r\nSTTwitter requires iOS 5+ or OS X 10.7+.\r\n\r\nVea Software has a great written + live-demo [tutorial](http://tutorials.veasoftware.com/2013/12/23/twitter-api-version-1-1-app-authentication/) about creating a simple iOS app using STTwitter's app only mode.\r\n\r\n### Code Snippets\r\n\r\n##### Instantiate STTwitterAPI\r\n\r\n```Objective-C\r\nSTTwitterAPI *twitter = [STTwitterAPI twitterAPIWithOAuthConsumerKey:@\"\"\r\n                                                      consumerSecret:@\"\"\r\n                                                            username:@\"\"\r\n                                                            password:@\"\"];\r\n```\r\n\r\n##### Verify the credentials\r\n\r\n```Objective-C\r\n[twitter verifyCredentialsWithSuccessBlock:^(NSString *username) {\r\n    // ...\r\n} errorBlock:^(NSError *error) {\r\n    // ...\r\n}];\r\n```\r\n\r\n##### Get the timeline statuses\r\n\r\n```Objective-C\r\n[twitter getHomeTimelineSinceID:nil\r\n                          count:100\r\n                   successBlock:^(NSArray *statuses) {\r\n    // ...\r\n} errorBlock:^(NSError *error) {\r\n    // ...\r\n}];\r\n```\r\n\r\n##### Streaming API\r\n\r\n```Objective-C\r\nid request = [twitter getStatusesSampleDelimited:nil\r\n                                   stallWarnings:nil\r\n                                   progressBlock:^(id response) {\r\n    // ...\r\n} stallWarningBlock:nil\r\n         errorBlock:^(NSError *error) {\r\n    // ...\r\n}];\r\n\r\n// ...\r\n\r\n[request cancel]; // when you're done with it\r\n```\r\n\r\n##### App Only Authentication\r\n\r\n```Objective-C\r\nSTTwitterAPI *twitter = [STTwitterAPI twitterAPIAppOnlyWithConsumerKey:@\"\"\r\n                                                        consumerSecret:@\"\"];\r\n\r\n[twitter verifyCredentialsWithSuccessBlock:^(NSString *bearerToken) {\r\n    \r\n    [twitter getUserTimelineWithScreenName:@\"barackobama\"\r\n                              successBlock:^(NSArray *statuses) {\r\n        // ...\r\n    } errorBlock:^(NSError *error) {\r\n        // ...\r\n    }];\r\n\r\n} errorBlock:^(NSError *error) {\r\n    // ...\r\n}];\r\n```\r\n\r\n### Various Kinds of OAuth Connections\r\n\r\nYou can instantiate `STTwitterAPI` in three ways:\r\n\r\n- use the Twitter account set in OS X Preferences or iOS Settings\r\n- use a custom `consumer key` and `consumer secret` (three flavors)\r\n  - get an URL, fetch a PIN, enter it in your app, get oauth access tokens  \r\n  - set `username` and `password`, get oauth access tokens with XAuth, if the app is entitled to\r\n  - set `oauth token` and `oauth token secret` directly\r\n- use the [Application Only](https://dev.twitter.com/docs/auth/application-only-auth) authentication and get / use a \"bearer token\"\r\n\r\nSo there are five cases altogether, hence these five methods:\r\n\r\n```Objective-C\r\n+ (STTwitterAPI *)twitterAPIOSWithFirstAccount;\r\n\r\n+ (STTwitterAPI *)twitterAPIWithOAuthConsumerKey:(NSString *)consumerKey\r\n                                  consumerSecret:(NSString *)consumerSecret;\r\n\r\n+ (STTwitterAPI *)twitterAPIWithOAuthConsumerKey:(NSString *)consumerKey\r\n                                  consumerSecret:(NSString *)consumerSecret\r\n                                        username:(NSString *)username\r\n                                        password:(NSString *)password;\r\n\r\n+ (STTwitterAPI *)twitterAPIWithOAuthConsumerKey:(NSString *)consumerKey\r\n                                  consumerSecret:(NSString *)consumerSecret\r\n                                      oauthToken:(NSString *)oauthToken\r\n                                oauthTokenSecret:(NSString *)oauthTokenSecret;\r\n               \r\n+ (STTwitterAPI *)twitterAPIAppOnlyWithConsumerKey:(NSString *)consumerKey\r\n                                    consumerSecret:(NSString *)consumerSecret;\r\n```\r\n\r\n##### Reverse Authentication\r\n\r\nReference: [https://dev.twitter.com/docs/ios/using-reverse-auth](https://dev.twitter.com/docs/ios/using-reverse-auth)\r\n\r\nThe most common use case of reverse authentication is letting users register/login to a remote service with their OS X or iOS Twitter account.\r\n\r\n    iOS/OSX     Twitter     Server\r\n    -------------->                 reverse auth.\r\n    < - - - - - - -                 access tokens\r\n        \r\n    ----------------------------->  access tokens\r\n        \r\n                   <--------------  access Twitter on user's behalf\r\n                    - - - - - - ->\r\n\r\nHere is how to use reverse authentication with STTwitter:\r\n\r\n```Objective-C\r\nSTTwitterAPI *twitter = [STTwitterAPI twitterAPIWithOAuthConsumerName:nil\r\n                                                          consumerKey:@\"CONSUMER_KEY\"\r\n                                                       consumerSecret:@\"CONSUMER_SECRET\"];\r\n\r\n[twitter postReverseOAuthTokenRequest:^(NSString *authenticationHeader) {\r\n    \r\n    STTwitterAPI *twitterAPIOS = [STTwitterAPI twitterAPIOSWithFirstAccount];\r\n    \r\n    [twitterAPIOS verifyCredentialsWithSuccessBlock:^(NSString *username) {\r\n        \r\n        [twitterAPIOS postReverseAuthAccessTokenWithAuthenticationHeader:authenticationHeader\r\n                                                            successBlock:^(NSString *oAuthToken,\r\n                                                                           NSString *oAuthTokenSecret,\r\n                                                                           NSString *userID,\r\n                                                                           NSString *screenName) {\r\n                                                                \r\n                                                                // use the tokens...\r\n                                                                \r\n                                                            } errorBlock:^(NSError *error) {\r\n                                                                // ...\r\n                                                            }];\r\n        \r\n    } errorBlock:^(NSError *error) {\r\n        // ...\r\n    }];\r\n    \r\n} errorBlock:^(NSError *error) {\r\n    // ...\r\n}];\r\n```\r\n\r\nContrary to what can be read here and there, you can perfectly [access direct messages from iOS Twitter accounts](http://stackoverflow.com/questions/17990484/accessing-twitter-direct-messages-using-slrequest-ios/18760445#18760445).\r\n\r\n### OAuth Consumer Tokens\r\n\r\nIn Twitter REST API v1.1, each client application must authenticate itself with `consumer key` and `consumer secret` tokens. You can request consumer tokens for your app on Twitter's website: [https://dev.twitter.com/apps](https://dev.twitter.com/apps).\r\n\r\nSTTwitter demo project comes with `TwitterClients.plist` where you can enter your own consumer tokens.\r\n\r\n### Demo / Test Project\r\n\r\nThere is a demo project for OS X in `demo_osx`, which lets you choose how to get the OAuth tokens (see below).\r\n\r\nAn archive generated on 2013-10-20 10:35 is available at [http://seriot.ch/temp/STTwitterDemoOSX.app.zip](http://seriot.ch/temp/STTwitterDemoOSX.app.zip).\r\n\r\nOnce you got the OAuth tokens, you can get your timeline and post a new status.\r\n\r\nThere is also a simple iOS demo project in `demo_ios`.\r\n\r\n<img border=\"1\" src=\"Art/osx.png\" width=\"840\" alt=\"STTwitter Demo iOS\"></img> \r\n<img border=\"1\" src=\"Art/ios.png\" alt=\"STTwitter Demo iOS\"></img> \r\n<img border=\"1\" src=\"Art/tweet.png\" alt=\"sample tweet\"></img>\r\n\r\n### Integration Tips\r\n\r\n##### Concurrency\r\n\r\nSTTwitter is supposed to be used from the main thread. The HTTP requests are performed anychronously and the callbacks are guaranteed to be called on main thread.\r\n\r\n##### Remove Asserts in Release Mode\r\n\r\nThere are several asserts in the code. They are very useful in debug mode but you should not include them in release.\r\n\r\nNew projects created with Xcode 5 already remove NSAssert logic by default in release.\r\n\r\nIn older projects, you can set the compilation flag `-DNS_BLOCK_ASSERTIONS=1`.\r\n\r\n##### Number of Characters in a Tweet\r\n\r\nUse the method `-[NSString st_numberOfCharactersInATweet]` to let the user know how many characters she can enter before the end of the Tweet. The method may also return a negative value if the string exceeds a tweet's maximum length. The method considers the shortened URL lengths.\r\n\r\n##### Date Formatter\r\n\r\nIn order to convert the string in the `created_at` field from Twitter's JSON into an NSDate instance, you can use the `+[NSDateFormatter st_TwitterDateFormatter]`.\r\n\r\n```Objective-C\r\nNSDateFormatter *df = [NSDateFormatter st_TwitterDateFormatter];\r\nNSString *dateString = [d valueForKey:@\"created_at\"]; // \"Sun Jun 28 20:33:01 +0000 2009\"\r\nNSDate *date = [df dateFromString:dateString];\r\n```\r\n\r\n##### URLs Shorteners\r\n\r\nIn order to expand shortened URLs such as Twitter's `t.co` service, use:\r\n\r\n```Objective-C\r\n[STHTTPRequest expandedURLStringForShortenedURLString:@\"http://t.co/tmoxbSfDWc\" successBlock:^(NSString *expandedURLString) {\r\n    //\r\n} errorBlock:^(NSError *error) {\r\n    //\r\n}];\r\n```\r\n\r\n##### API Responses Text Processing\r\n\r\nYou may want to use Twitter's own Objective-C library for text processing: [https://github.com/twitter/twitter-text-objc/](https://github.com/twitter/twitter-text-objc/).\r\n\r\n`twitter-text-objc` provides you with methods such as:\r\n\r\n```Objective-C\r\n+ (NSArray*)entitiesInText:(NSString*)text;\r\n+ (NSArray*)URLsInText:(NSString*)text;\r\n+ (NSArray*)hashtagsInText:(NSString*)text checkingURLOverlap:(BOOL)checkingURLOverlap;\r\n+ (NSArray*)symbolsInText:(NSString*)text checkingURLOverlap:(BOOL)checkingURLOverlap;\r\n+ (NSArray*)mentionedScreenNamesInText:(NSString*)text;\r\n+ (NSArray*)mentionsOrListsInText:(NSString*)text;\r\n+ (TwitterTextEntity*)repliedScreenNameInText:(NSString*)text;\r\n```\r\n\r\n##### Boolean Parameters\r\n\r\nThere are a lot of optional parameters in Twitter API. In STTwitter, you can ignore such parameters by passing `nil`. Regarding boolean parameters, STTwitter can't just use Objective-C `YES` and `NO` because `NO` has the same value as `nil` (zero). So boolean parameters are wrapped into `NSNumber` objects, which are pretty easy to use with boolean values thanks to Objective-C literals. So, with STTwitter, you will assign an optional parameter of Twitter API either as `@(YES)`, `@(NO)` or `nil`.\r\n\r\n##### Long Methods\r\n\r\nSTTwitter provides a full, \"one-to-one\" Objective-C front-end to Twitter REST API. It often results in long methd names with many parameters. In your application, you may want to add your own, simplified methods on top of STTwitterAPI. A good idea is to create an Objective-C category for your application, such as in the following code.\r\n\r\n`STTwitterAPI+MyApp.h`\r\n\r\n```Objective-C\r\n#import \"STTwitterAPI.h\"\r\n\r\n@interface STTwitterAPI (MyApp)\r\n\r\n- (void)getStatusesShowID:(NSString *)statusID\r\n             successBlock:(void(^)(NSDictionary *status))successBlock\r\n               errorBlock:(void(^)(NSError *error))errorBlock;\r\n\r\n@end\r\n```\r\n\r\n`STTwitterAPI+MyApp.m`\r\n\r\n```Objective-C    \r\n#import \"STTwitterAPI+MyApp.h\"\r\n\r\n@implementation STTwitterAPI (MyApp)\r\n\r\n- (void)getStatusesShowID:(NSString *)statusID\r\n             successBlock:(void(^)(NSDictionary *status))successBlock\r\n               errorBlock:(void(^)(NSError *error))errorBlock {\r\n\r\n    [self getStatusesShowID:statusID\r\n                   trimUser:@(YES)\r\n           includeMyRetweet:nil\r\n            includeEntities:@(NO)\r\n               successBlock:^(NSDictionary *status) {\r\n\r\n                   successBlock(status);\r\n\r\n               } errorBlock:^(NSError *error) {\r\n        \r\n                   errorBlock(error);\r\n\r\n               }];\r\n}\r\n\r\n@end\r\n```\r\n\r\n##### Stream Request and Connection Losses\r\n\r\nStreaming requests may be lost when your iOS application comes back to foreground after a while in background. In order to handle this case properly, you can detect the connection loss in the error block and restart the stream request from there.\r\n\r\n```Objective-C\r\n// ...\r\n} errorBlock:^(NSError *error) {\r\n\r\n    if([[error domain] isEqualToString:NSURLErrorDomain] && [error code] == NSURLErrorNetworkConnectionLost) {\r\n        [self startStreamRequest];\r\n    }\r\n\r\n}];\r\n```\r\n\r\n### Troubleshooting\r\n\r\n##### xAuth\r\n\r\nTwitter restricts the xAuth authentication process to xAuth-enabled consumer tokens only. So, if you get an error like `The consumer tokens are probably not xAuth enabled.` while accessing `https://api.twitter.com/oauth/access_token`, see Twitter's website [https://dev.twitter.com/docs/oauth/xauth](https://dev.twitter.com/docs/oauth/xauth) and ask Twitter to enable the xAuth authentication process for your consumer tokens.\r\n\r\n##### Anything Else\r\n\r\nPlease [fill an issue](https://github.com/nst/STTwitter/issues) on GitHub.\r\n\r\n### Developers\r\n\r\nThe application only interacts with `STTwitterAPI`.\r\n\r\n`STTwitterAPI` maps Objective-C methods with all Twitter API endpoints.\r\n\r\nYou can create your own convenience methods with fewer parameters. You can also use this generic method directly:\r\n\r\n```Objective-C\r\n        - (id)fetchResource:(NSString *)resource\r\n                 HTTPMethod:(NSString *)HTTPMethod\r\n              baseURLString:(NSString *)baseURLString\r\n                 parameters:(NSDictionary *)parameters\r\n        uploadProgressBlock:(void(^)(NSInteger bytesWritten, NSInteger totalBytesWritten, NSInteger totalBytesExpectedToWrite))uploadProgressBlock\r\n      downloadProgressBlock:(void (^)(id request, id response))downloadProgressBlock\r\n               successBlock:(void (^)(id request, NSDictionary *headers, id response))successBlock\r\n                 errorBlock:(void (^)(id request, NSDictionary *headers, NSError *error))errorBlock;\r\n```\r\n\r\n##### Layer Model\r\n     \r\n     +-----------------------------------------------------------------+\r\n     |                         Your Application                        |\r\n     +-------------------------------------------------+---------------+\r\n     |                  STTwitterAPI                   | STTwitterHTML |\r\n     +-------------------------------------------------+               |\r\n     + - - - - - - - - - - - - - - - - - - - - - - - - +               |\r\n     |              STTwitterOAuthProtocol             |               |\r\n     + - - - - - - - - - - - - - - - - - - - - - - - - +               |\r\n     +-------------+----------------+------------------+               |\r\n     | STTwitterOS | STTwitterOAuth | STTwitterAppOnly |               |\r\n     |             +----------------+------------------+---------------+\r\n     |             |                   STHTTPRequest                   |\r\n     +-------------+---------------------------------------------------+\r\n      |\r\n      + Accounts.framework\r\n      + Social.framework\r\n     \r\n##### Summary\r\n     \r\n     * STTwitterAPI\r\n        - can be instantiated with the authentication mode you want\r\n        - provides methods to interact with each Twitter API endpoint\r\n\r\n     * STTwitterHTML\r\n        - a hackish class to login on Twitter by parsing the HTML code and get a PIN\r\n        - it can break at anytime, your app should not rely on it in production\r\n\r\n     * STTwitterOAuthProtocol\r\n        - provides generic methods to POST and GET resources on Twitter's hosts\r\n     \r\n     * STTwitterOS\r\n        - uses Twitter accounts defined in OS X Preferences or iOS Settings\r\n        - uses OS X / iOS frameworks to interact with Twitter API\r\n     \r\n     * STTwitterOAuth\r\n        - implements OAuth and xAuth authentication\r\n\r\n     * STTwitterAppOnly\r\n        - implements the 'app only' authentication\r\n        - https://dev.twitter.com/docs/auth/application-only-auth\r\n\r\n     * STHTTPRequest\r\n        - block-based wrapper around NSURLConnection\r\n        - https://github.com/nst/STHTTPRequest\r\n\r\n### BSD 3-Clause License\r\n\r\nSee [LICENCE.txt](LICENCE.txt).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}